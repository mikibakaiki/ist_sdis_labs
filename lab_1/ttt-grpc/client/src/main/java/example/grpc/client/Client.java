package example.grpc.client;

/* these are generated by the hello-world-server contract */
import example.grpc.TTT;
import example.grpc.TTTServiceGrpc;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;

import java.util.Scanner;

@SuppressWarnings("Duplicates")
public class Client {

	Scanner keyboardSc;
	int winner = 0;
	int player = 1;

	public Client() {
		keyboardSc = new Scanner(System.in);
	}

	public int readPlay() {
		int play;
		do {
			System.out.printf(
					"\nPlayer %d, please enter the number of the square "
							+ "where you want to place your %c (or 0 to refresh the board): \n",
					player, (player == 1) ? 'X' : 'O');
			play = keyboardSc.nextInt();
		} while (play > 9 || play < 0);
		return play;
	}

	public void playGame(TTTServiceGrpc.TTTServiceBlockingStub stub) {
		int play;
		boolean playAccepted;

		do {
			player = ++player % 2;
			do {
				TTT.CurrentBoardRequest boardRequest = TTT.CurrentBoardRequest.newBuilder().build();
				TTT.CurrentBoardResponse boardResponse = stub.getBoard(boardRequest);

				System.out.println(boardResponse.getCurrentBoard());

				play = readPlay();
				if (play != 0) {
					TTT.PlayerMoveRequest playRequest = TTT.PlayerMoveRequest.newBuilder().
							setRowNumber(--play / 3).setColumnNumber(play % 3).setPlayerNumber(player).build();

					TTT.PlayerMoveResponse playResponse = stub.play(playRequest);
					System.out.println(playResponse);
					playAccepted = playResponse.getValidMove();

					if (!playAccepted)
						System.out.println("Invalid play! Try again.");
				} else
					playAccepted = false;
			} while (!playAccepted);
			TTT.WinnerRequest winnerRequest = TTT.WinnerRequest.newBuilder().build();
			TTT.WinnerResponse winnerResponse = stub.getWinner(winnerRequest);
			winner = winnerResponse.getWinnerId();

		} while (winner == -1);

		TTT.CurrentBoardRequest boardRequest = TTT.CurrentBoardRequest.newBuilder().build();
		TTT.CurrentBoardResponse boardResponse = stub.getBoard(boardRequest);
		System.out.println(boardResponse.getCurrentBoard());
	}

	public void congratulate(TTTServiceGrpc.TTTServiceBlockingStub stub) {
		if (winner == 2)
			System.out.printf("\nHow boring, it is a draw\n");
		else
			System.out.printf("\nCongratulations, player %d, YOU ARE THE WINNER!\n", winner);
	}


	public static void main(String[] args) throws Exception {
		System.out.println(Client.class.getSimpleName());

		// receive and print arguments
		System.out.printf("Received %d arguments%n", args.length);
		for (int i = 0; i < args.length; i++) {
			System.out.printf("arg[%d] = %s%n", i, args[i]);
		}

		// check arguments
		if (args.length < 2) {
			System.err.println("Argument(s) missing!");
			System.err.printf("Usage: java %s host port%n", Client.class.getName());
			return;
		}

		final String host = args[0];
		final int port = Integer.parseInt(args[1]);
		final String target = host + ":" + port;

		// Channel is the abstraction to connect to a service endpoint
		// Let us use plaintext communication because we do not have certificates
		final ManagedChannel channel = ManagedChannelBuilder.forTarget(target).usePlaintext().build();

		// It is up to the client to determine whether to block the call
		// Here we create a blocking stub, but an async stub,
		// or an async stub with Future are always possible.

		TTTServiceGrpc.TTTServiceBlockingStub stub = TTTServiceGrpc.newBlockingStub(channel);


		Client cli = new Client();
		cli.playGame(stub);
		cli.congratulate(stub);

		// A Channel should be shutdown before stopping the process.
		channel.shutdownNow();
	}

}
